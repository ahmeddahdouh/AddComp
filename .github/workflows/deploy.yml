name: CI/CD

on:
  push:
    branches: [master]

env:
  DOCKERHUB_USERNAME: ahmeddocker98
  BACKEND_IMAGE: ahmeddocker98/mon-backend
  FRONTEND_IMAGE: ahmeddocker98/mon-frontend

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Test with Docker Compose
        run: |
          docker-compose up -d
          # Wait for services to start
          sleep 30

          # Test if backend is running
          BACKEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000)
          echo "Backend status code: $BACKEND_STATUS"

          # Test if frontend is running
          FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)
          echo "Frontend status code: $FRONTEND_STATUS"

          # Check if services are healthy
          if [ "$BACKEND_STATUS" -ne 200 ] && [ "$BACKEND_STATUS" -ne 404 ]; then
            echo "Backend service is not responding properly"
            docker-compose logs backend
            docker-compose down
            exit 1
          fi

          if [ "$FRONTEND_STATUS" -ne 200 ] && [ "$FRONTEND_STATUS" -ne 404 ]; then
            echo "Frontend service is not responding properly"
            docker-compose logs frontend
            docker-compose down
            exit 1
          fi

          echo "All services are running correctly"
          docker-compose down

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u $DOCKERHUB_USERNAME --password-stdin

      - name: Build & Push Backend
        run: |
          docker build -t $BACKEND_IMAGE:latest ./backend
          docker push $BACKEND_IMAGE:latest

      - name: Build & Push Frontend
        run: |
          docker build -t $FRONTEND_IMAGE:latest ./frontend
          docker push $FRONTEND_IMAGE:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Update K8s deployments
        run: |
          kubectl apply -f k8s/
